# プログラム仕様書

## 1. システム概要
このシステムは、Pythonを用いて開発されたAIチャットアプリケーションであり、OpenAIのAPIを活用してコードのリファクタリング提案、詳細なプログラム仕様書の生成、機能要件仕様書の生成を行うツールです。主な目的は、開発者がコード品質を向上させ、システムの理解を深めることです。アプリケーションは、ユーザーからの入力に応じて、指定されたPythonファイルの内容を解析し、リファクタリング提案や仕様書を自動生成します。

## 2. ファイルごとの役割と詳細説明

### `check_refactoring.py`
- **役割**: コードのリファクタリング提案を生成する。
- **詳細**: `RefactoringChecker`クラスを含み、マージされたPythonファイルを読み取り、OpenAI APIを使用してリファクタリング提案を生成する。提案はファイルに保存され、必要なセクションが含まれているかを検証する。

### `generate_detailed_spec.py`
- **役割**: 詳細仕様書を生成する。
- **詳細**: `DetailedSpecificationGenerator`クラスを使用して、マージされたコードと機能要件仕様書を基に詳細なプログラム仕様書を生成し、ファイルに保存する。

### `generate_spec.py`
- **役割**: 機能要件仕様書を生成する。
- **詳細**: `SpecificationGenerator`クラスがPythonファイルを解析し、OpenAI APIを使用して機能要件仕様書を生成・保存する。

### `logging_config.py`
- **役割**: ロギングの設定を管理。
- **詳細**: ログファイルの設定と出力を管理し、アプリケーションの実行時に重要な情報を記録する。

### `main.py`
- **役割**: アプリケーションのエントリーポイント。
- **詳細**: コマンドライン引数を解析し、ユーザーの選択に応じた機能を実行する。各機能の実行過程で発生したエラーをログに記録する。

### `merge_files.py`
- **役割**: Pythonファイルをマージする。
- **詳細**: `PythonFileMerger`クラスがプロジェクト内のPythonファイルを収集し、1つのファイルにマージして出力する。

### `utils.py`
- **役割**: サポート機能を提供するユーティリティ。
- **詳細**: ファイルの読み書き、設定の読み込み、Pythonファイルの収集などの補助機能を提供する。

## 3. 関数ごとの役割と詳細説明

### `RefactoringChecker` クラス
- **`__init__`**: 設定を読み込み、OpenAIクライアントを初期化する。
- **`_read_merge_file`**: マージされたファイルを読み取る。
- **`_generate_prompt`**: AIに送信するプロンプトを生成する。
- **`_get_ai_response`**: OpenAI APIを使用してリファクタリング提案を生成する。
- **`generate_suggestions`**: リファクタリング提案を生成し、ファイルに保存する。
- **`validate_suggestions`**: 生成されたリファクタリング提案の妥当性を検証する。

### `DetailedSpecificationGenerator` クラス
- **`__init__`**: 設定を読み込み、OpenAIクライアントを初期化する。
- **`_read_input_files`**: 必要な入力ファイルを読み込む。
- **`_generate_prompt`**: AIに送信するプロンプトを生成する。
- **`_get_ai_response`**: OpenAI APIを使用して詳細仕様書を生成する。
- **`generate`**: 詳細仕様書を生成し、ファイルに保存する。
- **`validate_specification`**: 生成された詳細仕様書の妥当性を検証する。

### `SpecificationGenerator` クラス
- **`__init__`**: 設定を読み込み、OpenAIクライアントを初期化する。
- **`generate`**: 仕様書を生成し、ファイルに保存する。
- **`_read_merge_file`**: マージされたファイルを読み取る。
- **`_generate_prompt`**: AIに送信するプロンプトを生成する。
- **`_get_ai_response`**: OpenAI APIを使用して仕様書を生成する。

### `PythonFileMerger` クラス
- **`__init__`**: 設定を読み込み、出力ディレクトリを初期化する。
- **`_should_exclude`**: パスが除外パターンに一致するか確認する。
- **`_get_directory_structure`**: ディレクトリ構造を取得する。
- **`_format_file_content`**: ファイル内容をフォーマットする。
- **`process`**: ファイルマージ処理を実行する。

## 4. 非機能要件
- **パフォーマンス**: 各機能が迅速に応答する設計。
- **セキュリティ**: OpenAI APIキーは安全に管理。
- **スケーラビリティ**: 拡張可能なクラス設計。

## 5. 技術要件
- **プログラミング言語**: Python 3.x
- **ライブラリ**: OpenAI API、logging、os、sys、argparse、traceback、configparser、typing、fnmatch
- **環境**: Python環境が構築されたOS

## 6. 使用手順と注意事項
1. `settings.ini`でAPIキーとディレクトリ設定を行う。
2. 必要なPythonライブラリをインストールする。
3. `main.py`を実行し、コマンドラインの指示に従う。
4. 各機能の実行が完了すると、結果は指定されたファイルに保存される。